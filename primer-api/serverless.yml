service: primer-challenge-serverless-framework
frameworkVersion: '3'

custom:
  vars: ${file(vars.yml):${opt:stage, "self:provider.stage"}, file(vars.yml):dev} 
  apiKeys:
    - name: ${self:custom.vars.API_KEY_NAME}
      value: ${ssm:${self:custom.vars.API_KEY_NAME}}
      usagePlan:
        name: ${self:custom.vars.USAGE_PLAN_NAME}
        quota:
          limit: 100
          offset: 2
          period: WEEK
        throttle:
          burstLimit: 5
          rateLimit: 10

provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: ${self:custom.vars.REGION}
  stage: ${self:custom.vars.STAGE}
  memorySize: 512
  versionFunctions: false
  timeout: 10
  environment:
    ENVIRONMENT: ${self:custom.vars.STAGE}
    TRANSACTION_TABLE: ${self:custom.vars.TRANSACTION_TABLE}
    TRANSACTION_DLQ: ${self:custom.vars.TRANSACTION_DLQ}
  iam:
    role:
      name: primer-challenge-serverless-fwk-role
      statements:
        - Effect: 'Allow'
          Action: 
            - 'dynamodb:Scan'
            - 'dynamodb:PutItem'
            - 'dynamodb:GetItem'
          Resource: 'arn:aws:dynamodb:${self:custom.vars.REGION}:${self:custom.vars.AWS_ACCOUNT_ID}:table/${self:custom.vars.TRANSACTION_TABLE}'
        - Effect: 'Allow'
          Action: 
            - 'sqs:SendMessage'
          Resource: 'arn:aws:sqs:${self:custom.vars.REGION}:${self:custom.vars.AWS_ACCOUNT_ID}:${self:custom.vars.TRANSACTION_DLQ}'

plugins:
  - serverless-offline
  - serverless-add-api-key
  - serverless-python-requirements

functions:
  populate:
    handler: app.populate_table
    events:
      - http:
          method: POST
          path: populate
  
  transactions:
    handler: app.transactions
    events:
      - http:
          method: GET
          path: transactions
          private: true

  transaction:
    handler: app.transactions
    events:
      - http:
          method: GET
          path: transactions/{id}
          private: true

  addTransaction:
    handler: app.add_transaction
    events:
      - sqs:
          arn: arn:aws:sqs:${self:custom.vars.REGION}:${self:custom.vars.AWS_ACCOUNT_ID}:${self:custom.vars.TRANSACTION_QUEUE}
          batchSize: 5
          maximumBatchingWindow: 60
